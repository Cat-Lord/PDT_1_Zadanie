/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.util.Arrays;
import java.util.List;

import model.Keys;
import model.Public;
import model.tables.records.TweetMentionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sk.catheaven.model.tables.Accounts;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TweetMentions extends TableImpl<TweetMentionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tweet_mentions</code>
     */
    public static final TweetMentions TWEET_MENTIONS = new TweetMentions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TweetMentionsRecord> getRecordType() {
        return TweetMentionsRecord.class;
    }

    /**
     * The column <code>public.tweet_mentions.id</code>.
     */
    public final TableField<TweetMentionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tweet_mentions.account_id</code>.
     */
    public final TableField<TweetMentionsRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tweet_mentions.tweet_id</code>.
     */
    public final TableField<TweetMentionsRecord, String> TWEET_ID = createField(DSL.name("tweet_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private TweetMentions(Name alias, Table<TweetMentionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TweetMentions(Name alias, Table<TweetMentionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tweet_mentions</code> table reference
     */
    public TweetMentions(String alias) {
        this(DSL.name(alias), TWEET_MENTIONS);
    }

    /**
     * Create an aliased <code>public.tweet_mentions</code> table reference
     */
    public TweetMentions(Name alias) {
        this(alias, TWEET_MENTIONS);
    }

    /**
     * Create a <code>public.tweet_mentions</code> table reference
     */
    public TweetMentions() {
        this(DSL.name("tweet_mentions"), null);
    }

    public <O extends Record> TweetMentions(Table<O> child, ForeignKey<O, TweetMentionsRecord> key) {
        super(child, key, TWEET_MENTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TweetMentionsRecord, Integer> getIdentity() {
        return (Identity<TweetMentionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TweetMentionsRecord> getPrimaryKey() {
        return Keys.TWEET_MENTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<TweetMentionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TWEET_MENTIONS_ACCOUNT_ID_TWEET_ID_KEY);
    }

    @Override
    public List<ForeignKey<TweetMentionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TWEET_MENTIONS__TWEET_MENTIONS_ACCOUNT_ID_FKEY, Keys.TWEET_MENTIONS__TWEET_MENTIONS_TWEET_ID_FKEY);
    }

    private transient Accounts _accounts;
    private transient model.tables.Tweets _tweets;

    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.TWEET_MENTIONS__TWEET_MENTIONS_ACCOUNT_ID_FKEY);

        return _accounts;
    }

    public model.tables.Tweets tweets() {
        if (_tweets == null)
            _tweets = new model.tables.Tweets(this, Keys.TWEET_MENTIONS__TWEET_MENTIONS_TWEET_ID_FKEY);

        return _tweets;
    }

    @Override
    public TweetMentions as(String alias) {
        return new TweetMentions(DSL.name(alias), this);
    }

    @Override
    public TweetMentions as(Name alias) {
        return new TweetMentions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TweetMentions rename(String name) {
        return new TweetMentions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TweetMentions rename(Name name) {
        return new TweetMentions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
