/*
 * This file is generated by jOOQ.
 */
package model;


import model.tables.StDump;
import model.tables.StDumppoints;
import model.tables.StDumprings;
import model.tables.StHexagongrid;
import model.tables.StSquaregrid;
import model.tables.StSubdivide;
import model.tables.records.StDumpRecord;
import model.tables.records.StDumppointsRecord;
import model.tables.records.StDumpringsRecord;
import model.tables.records.StHexagongridRecord;
import model.tables.records.StSquaregridRecord;
import model.tables.records.StSubdivideRecord;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;


/**
 * Convenience access to all stored procedures and functions in public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static Result<StDumpRecord> stDump(
          Configuration configuration
        , Object __1
    ) {
        return configuration.dsl().selectFrom(model.tables.StDump.ST_DUMP.call(
              __1
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StDump stDump(
          Object __1
    ) {
        return model.tables.StDump.ST_DUMP.call(
            __1
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StDump stDump(
          Field<Object> __1
    ) {
        return model.tables.StDump.ST_DUMP.call(
            __1
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static Result<StDumppointsRecord> stDumppoints(
          Configuration configuration
        , Object __1
    ) {
        return configuration.dsl().selectFrom(model.tables.StDumppoints.ST_DUMPPOINTS.call(
              __1
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StDumppoints stDumppoints(
          Object __1
    ) {
        return model.tables.StDumppoints.ST_DUMPPOINTS.call(
            __1
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StDumppoints stDumppoints(
          Field<Object> __1
    ) {
        return model.tables.StDumppoints.ST_DUMPPOINTS.call(
            __1
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static Result<StDumpringsRecord> stDumprings(
          Configuration configuration
        , Object __1
    ) {
        return configuration.dsl().selectFrom(model.tables.StDumprings.ST_DUMPRINGS.call(
              __1
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StDumprings stDumprings(
          Object __1
    ) {
        return model.tables.StDumprings.ST_DUMPRINGS.call(
            __1
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StDumprings stDumprings(
          Field<Object> __1
    ) {
        return model.tables.StDumprings.ST_DUMPRINGS.call(
            __1
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static Result<StHexagongridRecord> stHexagongrid(
          Configuration configuration
        , Double size
        , Object bounds
    ) {
        return configuration.dsl().selectFrom(model.tables.StHexagongrid.ST_HEXAGONGRID.call(
              size
            , bounds
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StHexagongrid stHexagongrid(
          Double size
        , Object bounds
    ) {
        return model.tables.StHexagongrid.ST_HEXAGONGRID.call(
            size,
            bounds
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StHexagongrid stHexagongrid(
          Field<Double> size
        , Field<Object> bounds
    ) {
        return model.tables.StHexagongrid.ST_HEXAGONGRID.call(
            size,
            bounds
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static Result<StSquaregridRecord> stSquaregrid(
          Configuration configuration
        , Double size
        , Object bounds
    ) {
        return configuration.dsl().selectFrom(model.tables.StSquaregrid.ST_SQUAREGRID.call(
              size
            , bounds
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StSquaregrid stSquaregrid(
          Double size
        , Object bounds
    ) {
        return model.tables.StSquaregrid.ST_SQUAREGRID.call(
            size,
            bounds
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StSquaregrid stSquaregrid(
          Field<Double> size
        , Field<Object> bounds
    ) {
        return model.tables.StSquaregrid.ST_SQUAREGRID.call(
            size,
            bounds
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static Result<StSubdivideRecord> stSubdivide(
          Configuration configuration
        , Object geom
        , Integer maxvertices
        , Double gridsize
    ) {
        return configuration.dsl().selectFrom(model.tables.StSubdivide.ST_SUBDIVIDE.call(
              geom
            , maxvertices
            , gridsize
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StSubdivide stSubdivide(
          Object geom
        , Integer maxvertices
        , Double gridsize
    ) {
        return model.tables.StSubdivide.ST_SUBDIVIDE.call(
            geom,
            maxvertices,
            gridsize
        );
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static StSubdivide stSubdivide(
          Field<Object> geom
        , Field<Integer> maxvertices
        , Field<Double> gridsize
    ) {
        return model.tables.StSubdivide.ST_SUBDIVIDE.call(
            geom,
            maxvertices,
            gridsize
        );
    }
}
