/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import model.Keys;
import model.Public;
import model.tables.records.TweetsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tweets extends TableImpl<TweetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tweets</code>
     */
    public static final Tweets TWEETS = new Tweets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TweetsRecord> getRecordType() {
        return TweetsRecord.class;
    }

    /**
     * The column <code>public.tweets.id</code>.
     */
    public final TableField<TweetsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.tweets.content</code>.
     */
    public final TableField<TweetsRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public final TableField<TweetsRecord, Object> LOCATION = createField(DSL.name("location"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "");

    /**
     * The column <code>public.tweets.retweet_count</code>.
     */
    public final TableField<TweetsRecord, Integer> RETWEET_COUNT = createField(DSL.name("retweet_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tweets.favorite_count</code>.
     */
    public final TableField<TweetsRecord, Integer> FAVORITE_COUNT = createField(DSL.name("favorite_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tweets.happened_at</code>.
     */
    public final TableField<TweetsRecord, OffsetDateTime> HAPPENED_AT = createField(DSL.name("happened_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.tweets.author_id</code>.
     */
    public final TableField<TweetsRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tweets.country_id</code>.
     */
    public final TableField<TweetsRecord, Integer> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tweets.parent_id</code>.
     */
    public final TableField<TweetsRecord, String> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.tweets.sentiment_negative</code>.
     */
    public final TableField<TweetsRecord, Double> SENTIMENT_NEGATIVE = createField(DSL.name("sentiment_negative"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.tweets.sentiment_neutral</code>.
     */
    public final TableField<TweetsRecord, Double> SENTIMENT_NEUTRAL = createField(DSL.name("sentiment_neutral"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.tweets.sentiment_positive</code>.
     */
    public final TableField<TweetsRecord, Double> SENTIMENT_POSITIVE = createField(DSL.name("sentiment_positive"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.tweets.sentiment_compound</code>.
     */
    public final TableField<TweetsRecord, Double> SENTIMENT_COMPOUND = createField(DSL.name("sentiment_compound"), SQLDataType.DOUBLE, this, "");

    private Tweets(Name alias, Table<TweetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tweets(Name alias, Table<TweetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tweets</code> table reference
     */
    public Tweets(String alias) {
        this(DSL.name(alias), TWEETS);
    }

    /**
     * Create an aliased <code>public.tweets</code> table reference
     */
    public Tweets(Name alias) {
        this(alias, TWEETS);
    }

    /**
     * Create a <code>public.tweets</code> table reference
     */
    public Tweets() {
        this(DSL.name("tweets"), null);
    }

    public <O extends Record> Tweets(Table<O> child, ForeignKey<O, TweetsRecord> key) {
        super(child, key, TWEETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TweetsRecord> getPrimaryKey() {
        return Keys.TWEETS_PKEY;
    }

    @Override
    public List<ForeignKey<TweetsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TWEETS__TWEETS_AUTHOR_ID_FKEY, Keys.TWEETS__TWEETS_COUNTRY_ID_FKEY, Keys.TWEETS__TWEETS_PARENT_ID_FKEY);
    }

    private transient Accounts _accounts;
    private transient Countries _countries;
    private transient Tweets _tweets;

    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.TWEETS__TWEETS_AUTHOR_ID_FKEY);

        return _accounts;
    }

    public Countries countries() {
        if (_countries == null)
            _countries = new Countries(this, Keys.TWEETS__TWEETS_COUNTRY_ID_FKEY);

        return _countries;
    }

    public Tweets tweets() {
        if (_tweets == null)
            _tweets = new Tweets(this, Keys.TWEETS__TWEETS_PARENT_ID_FKEY);

        return _tweets;
    }

    @Override
    public Tweets as(String alias) {
        return new Tweets(DSL.name(alias), this);
    }

    @Override
    public Tweets as(Name alias) {
        return new Tweets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tweets rename(String name) {
        return new Tweets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tweets rename(Name name) {
        return new Tweets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, Object, Integer, Integer, OffsetDateTime, Long, Integer, String, Double, Double, Double, Double> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
