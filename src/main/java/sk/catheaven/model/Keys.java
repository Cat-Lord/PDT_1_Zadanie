/*
 * This file is generated by jOOQ.
 */
package model;


import model.tables.Accounts;
import model.tables.Countries;
import model.tables.Hashtags;
import model.tables.SpatialRefSys;
import model.tables.TweetHashtags;
import model.tables.TweetMentions;
import model.tables.Tweets;
import model.tables.records.AccountsRecord;
import model.tables.records.CountriesRecord;
import model.tables.records.HashtagsRecord;
import model.tables.records.SpatialRefSysRecord;
import model.tables.records.TweetHashtagsRecord;
import model.tables.records.TweetMentionsRecord;
import model.tables.records.TweetsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountsRecord> ACCOUNTS_PKEY = Internal.createUniqueKey(Accounts.ACCOUNTS, DSL.name("accounts_pkey"), new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final UniqueKey<CountriesRecord> COUNTRIES_CODE_KEY = Internal.createUniqueKey(Countries.COUNTRIES, DSL.name("countries_code_key"), new TableField[] { Countries.COUNTRIES.CODE }, true);
    public static final UniqueKey<CountriesRecord> COUNTRIES_PKEY = Internal.createUniqueKey(Countries.COUNTRIES, DSL.name("countries_pkey"), new TableField[] { Countries.COUNTRIES.ID }, true);
    public static final UniqueKey<HashtagsRecord> HASHTAGS_PKEY = Internal.createUniqueKey(Hashtags.HASHTAGS, DSL.name("hashtags_pkey"), new TableField[] { Hashtags.HASHTAGS.ID }, true);
    public static final UniqueKey<HashtagsRecord> HASHTAGS_VALUE_KEY = Internal.createUniqueKey(Hashtags.HASHTAGS, DSL.name("hashtags_value_key"), new TableField[] { Hashtags.HASHTAGS.VALUE }, true);
    public static final UniqueKey<SpatialRefSysRecord> SPATIAL_REF_SYS_PKEY = Internal.createUniqueKey(SpatialRefSys.SPATIAL_REF_SYS, DSL.name("spatial_ref_sys_pkey"), new TableField[] { SpatialRefSys.SPATIAL_REF_SYS.SRID }, true);
    public static final UniqueKey<TweetHashtagsRecord> TWEET_HASHTAGS_HASHTAG_ID_TWEET_ID_KEY = Internal.createUniqueKey(TweetHashtags.TWEET_HASHTAGS, DSL.name("tweet_hashtags_hashtag_id_tweet_id_key"), new TableField[] { TweetHashtags.TWEET_HASHTAGS.HASHTAG_ID, TweetHashtags.TWEET_HASHTAGS.TWEET_ID }, true);
    public static final UniqueKey<TweetHashtagsRecord> TWEET_HASHTAGS_PKEY = Internal.createUniqueKey(TweetHashtags.TWEET_HASHTAGS, DSL.name("tweet_hashtags_pkey"), new TableField[] { TweetHashtags.TWEET_HASHTAGS.ID }, true);
    public static final UniqueKey<TweetMentionsRecord> TWEET_MENTIONS_ACCOUNT_ID_TWEET_ID_KEY = Internal.createUniqueKey(TweetMentions.TWEET_MENTIONS, DSL.name("tweet_mentions_account_id_tweet_id_key"), new TableField[] { TweetMentions.TWEET_MENTIONS.ACCOUNT_ID, TweetMentions.TWEET_MENTIONS.TWEET_ID }, true);
    public static final UniqueKey<TweetMentionsRecord> TWEET_MENTIONS_PKEY = Internal.createUniqueKey(TweetMentions.TWEET_MENTIONS, DSL.name("tweet_mentions_pkey"), new TableField[] { TweetMentions.TWEET_MENTIONS.ID }, true);
    public static final UniqueKey<TweetsRecord> TWEETS_PKEY = Internal.createUniqueKey(Tweets.TWEETS, DSL.name("tweets_pkey"), new TableField[] { Tweets.TWEETS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<TweetHashtagsRecord, HashtagsRecord> TWEET_HASHTAGS__TWEET_HASHTAGS_HASHTAG_ID_FKEY = Internal.createForeignKey(TweetHashtags.TWEET_HASHTAGS, DSL.name("tweet_hashtags_hashtag_id_fkey"), new TableField[] { TweetHashtags.TWEET_HASHTAGS.HASHTAG_ID }, Keys.HASHTAGS_PKEY, new TableField[] { Hashtags.HASHTAGS.ID }, true);
    public static final ForeignKey<TweetHashtagsRecord, TweetsRecord> TWEET_HASHTAGS__TWEET_HASHTAGS_TWEET_ID_FKEY = Internal.createForeignKey(TweetHashtags.TWEET_HASHTAGS, DSL.name("tweet_hashtags_tweet_id_fkey"), new TableField[] { TweetHashtags.TWEET_HASHTAGS.TWEET_ID }, Keys.TWEETS_PKEY, new TableField[] { Tweets.TWEETS.ID }, true);
    public static final ForeignKey<TweetMentionsRecord, AccountsRecord> TWEET_MENTIONS__TWEET_MENTIONS_ACCOUNT_ID_FKEY = Internal.createForeignKey(TweetMentions.TWEET_MENTIONS, DSL.name("tweet_mentions_account_id_fkey"), new TableField[] { TweetMentions.TWEET_MENTIONS.ACCOUNT_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final ForeignKey<TweetMentionsRecord, TweetsRecord> TWEET_MENTIONS__TWEET_MENTIONS_TWEET_ID_FKEY = Internal.createForeignKey(TweetMentions.TWEET_MENTIONS, DSL.name("tweet_mentions_tweet_id_fkey"), new TableField[] { TweetMentions.TWEET_MENTIONS.TWEET_ID }, Keys.TWEETS_PKEY, new TableField[] { Tweets.TWEETS.ID }, true);
    public static final ForeignKey<TweetsRecord, AccountsRecord> TWEETS__TWEETS_AUTHOR_ID_FKEY = Internal.createForeignKey(Tweets.TWEETS, DSL.name("tweets_author_id_fkey"), new TableField[] { Tweets.TWEETS.AUTHOR_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final ForeignKey<TweetsRecord, CountriesRecord> TWEETS__TWEETS_COUNTRY_ID_FKEY = Internal.createForeignKey(Tweets.TWEETS, DSL.name("tweets_country_id_fkey"), new TableField[] { Tweets.TWEETS.COUNTRY_ID }, Keys.COUNTRIES_PKEY, new TableField[] { Countries.COUNTRIES.ID }, true);
    public static final ForeignKey<TweetsRecord, TweetsRecord> TWEETS__TWEETS_PARENT_ID_FKEY = Internal.createForeignKey(Tweets.TWEETS, DSL.name("tweets_parent_id_fkey"), new TableField[] { Tweets.TWEETS.PARENT_ID }, Keys.TWEETS_PKEY, new TableField[] { Tweets.TWEETS.ID }, true);
}
