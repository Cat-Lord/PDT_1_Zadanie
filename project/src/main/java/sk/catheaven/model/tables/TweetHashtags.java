/*
 * This file is generated by jOOQ.
 */
package sk.catheaven.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sk.catheaven.model.Keys;
import sk.catheaven.model.Public;
import sk.catheaven.model.tables.records.TweetHashtagsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TweetHashtags extends TableImpl<TweetHashtagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tweet_hashtags</code>
     */
    public static final TweetHashtags TWEET_HASHTAGS = new TweetHashtags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TweetHashtagsRecord> getRecordType() {
        return TweetHashtagsRecord.class;
    }

    /**
     * The column <code>public.tweet_hashtags.id</code>.
     */
    public final TableField<TweetHashtagsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tweet_hashtags.hashtag_id</code>.
     */
    public final TableField<TweetHashtagsRecord, Integer> HASHTAG_ID = createField(DSL.name("hashtag_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tweet_hashtags.tweet_id</code>.
     */
    public final TableField<TweetHashtagsRecord, String> TWEET_ID = createField(DSL.name("tweet_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private TweetHashtags(Name alias, Table<TweetHashtagsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TweetHashtags(Name alias, Table<TweetHashtagsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tweet_hashtags</code> table reference
     */
    public TweetHashtags(String alias) {
        this(DSL.name(alias), TWEET_HASHTAGS);
    }

    /**
     * Create an aliased <code>public.tweet_hashtags</code> table reference
     */
    public TweetHashtags(Name alias) {
        this(alias, TWEET_HASHTAGS);
    }

    /**
     * Create a <code>public.tweet_hashtags</code> table reference
     */
    public TweetHashtags() {
        this(DSL.name("tweet_hashtags"), null);
    }

    public <O extends Record> TweetHashtags(Table<O> child, ForeignKey<O, TweetHashtagsRecord> key) {
        super(child, key, TWEET_HASHTAGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TweetHashtagsRecord, Integer> getIdentity() {
        return (Identity<TweetHashtagsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TweetHashtagsRecord> getPrimaryKey() {
        return Keys.TWEET_HASHTAGS_PKEY;
    }

    @Override
    public List<UniqueKey<TweetHashtagsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TWEET_HASHTAGS_HASHTAG_ID_TWEET_ID_KEY);
    }

    @Override
    public List<ForeignKey<TweetHashtagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TWEET_HASHTAGS__TWEET_HASHTAGS_HASHTAG_ID_FKEY, Keys.TWEET_HASHTAGS__TWEET_HASHTAGS_TWEET_ID_FKEY);
    }

    private transient Hashtags _hashtags;
    private transient Tweets _tweets;

    public Hashtags hashtags() {
        if (_hashtags == null)
            _hashtags = new Hashtags(this, Keys.TWEET_HASHTAGS__TWEET_HASHTAGS_HASHTAG_ID_FKEY);

        return _hashtags;
    }

    public Tweets tweets() {
        if (_tweets == null)
            _tweets = new Tweets(this, Keys.TWEET_HASHTAGS__TWEET_HASHTAGS_TWEET_ID_FKEY);

        return _tweets;
    }

    @Override
    public TweetHashtags as(String alias) {
        return new TweetHashtags(DSL.name(alias), this);
    }

    @Override
    public TweetHashtags as(Name alias) {
        return new TweetHashtags(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TweetHashtags rename(String name) {
        return new TweetHashtags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TweetHashtags rename(Name name) {
        return new TweetHashtags(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
